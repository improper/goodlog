#!/usr/bin/env ruby

# proper:bytes traffic monitor

require 'etc'
require 'eventmachine'
require 'eventmachine-tail'
require 'fileutils'
require 'json'
require 'optparse'
require 'pg'
require 'syslog'

CONFIG_FILE = '/usr/local/etc/probytesd.conf.rb'
PID_FILE = '/var/run/probytesd.pid'

class Logger
  class << self
    attr_accessor :target

    def method_missing(method, *args)
      if [:crit, :emerg, :alert, :err, :warning, :notice, :info, :debug].include?(method)
        message, *params = *args
        message.gsub!(/[\n\r]/, ' ')
        if target == :syslog
          Syslog.open('probytesd', 0, Syslog::LOG_DAEMON) unless Syslog.opened?
          Syslog.send(method, message, *params)
        else
          STDERR.puts(Time.new.to_s + ': ' + (message % params))
        end
        true
      else
        super
      end
    end
  end

  # default
  self.target = :syslog
end

class Traffic
  attr_reader :config

  def initialize(config_file)
    @host_traffic = {}
    @config = eval(File.read(config_file || CONFIG_FILE))
    @frontend_dir = @config[:frontend_dir]
    @frontend_dir += '/' unless @frontend_dir.match(/\/$/)
    update_frontend_static
  end

  def open_db
    @db = PG::Connection.open(@config[:postgresql])
    begin
      @db.exec('CREATE TABLE traffic (
                  hostname VARCHAR(200),
                  month INTEGER,
                  year INTEGER,
                  requests BIGINT,
                  bytes BIGINT,
                  PRIMARY KEY (hostname, month, year)
                )')
    rescue PG::Error => e
      # table does exist
    end
  end

  def increment_host(hostname, bytes, requests = 1)
    @host_traffic[hostname] ||= {:requests => 0, :bytes => 0}
    @host_traffic[hostname][:requests] += requests
    @host_traffic[hostname][:bytes] += bytes
  end

  def update_stats(time = Time.now)
    STDERR.puts "update stats"
    if not @host_traffic.empty?
      # time = Time.now
      month, year = time.month, time.year
      @host_traffic.keys.each do |hostname|
        STDERR.puts "#{hostname}: #{@host_traffic[hostname][:requests]} reqs / #{@host_traffic[hostname][:bytes]} bytes"
        result = @db.exec_params('UPDATE traffic SET requests = requests + $1::int, bytes = bytes + $2::bigint ' +
                                 'WHERE hostname = $3 AND month = $4::int AND year = $5::int',
                                 [@host_traffic[hostname][:requests], @host_traffic[hostname][:bytes], hostname, month, year])
        if result.cmd_tuples == 0
          @db.exec_params('INSERT INTO traffic (hostname, month, year, requests, bytes) VALUES ($1, $2::int, $3::int, $4::int, $5::bigint)',
                          [hostname, month, year, @host_traffic[hostname][:requests], @host_traffic[hostname][:bytes]])
        end
      end
      update_frontend_data
      @host_traffic = {}
    end
  end

  def update_frontend_static
    STDERR.puts "update frontend static"
    FileUtils.cp_r(Dir['dist/*'], @frontend_dir)
  end

  def update_frontend_data
    STDERR.puts "update frontend data"
    result = @db.exec('SELECT * FROM traffic')
    def string_to_int(r)
      {:hostname => r['hostname'],
       :month    => r['month'].to_i,
       :year     => r['year'].to_i,
       :requests => r['requests'].to_i,
       :bytes    => r['bytes'].to_i}
    end
    export = {
      :serverName      => @config[:server_name],
      :updateInterval  => @config[:update_interval],
      :traffic         => result.map {|r| string_to_int(r) },
      :exportTimestamp => Time.now.to_i * 1000
    }
    File.open(@frontend_dir + 'data.json', 'w') {|f| f.write export.to_json }
  end

  def mockup
    hostwords = %w{amet consetetur diam dolor eirmod elitr invidunt ipsum labore lorem magna nonumy sadipscing sed sit tempor}
    tlds = %w{.com .net .org .de}
    product = hostwords.product(tlds)
    hostnames = product.sample(product.size / 3).map(&:join)
    hosttraffic = {}

    hostnames.each do |hostname|
      hosttraffic[hostname] = {
        :bytes => (rand()**2.3 * 23 * 2**30).floor,
        :requests => (rand()**2.3 * 23 * 2**15).floor
      }
    end

    inject_month = ->(hostnames, month, year) do
      fake_time = Time.local(year, month)
      hostnames.each do |hostname|
        increment_host(hostname, hosttraffic[hostname][:bytes], hosttraffic[hostname][:requests])
        hosttraffic[hostname][:bytes] = (hosttraffic[hostname][:bytes] * (rand() * 0.3 + 0.85)).floor
        hosttraffic[hostname][:requests] = (hosttraffic[hostname][:requests] * (rand() * 0.3 + 0.85)).floor
      end
      update_stats(fake_time)
    end

    time = Time.now
    year = time.year - 2
    (3 + rand(7) .. 12).each {|month| inject_month.call(hostnames, month, year) }
    year = time.year - 1
    (1 .. 12).each {|month| inject_month.call(hostnames, month, year) }
    if time.month > 1
      year = time.year
      (1 .. time.month - 1).each {|month| inject_month.call(hostnames, month, year) }
    end
  end
end

class Reader < EventMachine::FileTail
  def initialize(path, startpos=-1, traffic)
    super(path, startpos)
    STDERR.puts "Tailing #{path}"
    @buffer = BufferedTokenizer.new
    @traffic = traffic
  end

  def receive_data(data)
    @buffer.extract(data).each do |line|
      STDERR.puts "#{path}: #{line}"
      if m = line.match(/^(?<hostname>\S+\.\S+) (?<request_bytes>\d+) (?<response_bytes>\d+)/)
        hostname = m['hostname']
        bytes_total = m['request_bytes'].to_i + m['response_bytes'].to_i
        STDERR.puts "host: #{m["hostname"]} bytes: #{bytes_total}"
        @traffic.config[:hostname_mapping].each do |mapping|
          hostname.gsub!(mapping[0], mapping[1])
        end
        STDERR.puts "host after mapping: #{hostname}"
        if @traffic.config[:hostname_whitelist] and not @traffic.config[:hostname_whitelist].empty?
          hostname = 'unknown' unless @traffic.config[:hostname_whitelist].any? {|e| e.class == Regexp ? hostname.match(e) : hostname == e }
        end
        STDERR.puts "host after whitelisting: #{hostname}"
        @traffic.increment_host(hostname, bytes_total)
      else
        STDERR.puts "ignoring input: #{line}"
      end
    end
  end
end

class Daemon
  def initialize(options)
    @options = options
  end

  def run
    @traffic.open_db
    @traffic.update_frontend_data
    EM.run do
      Signal.trap('INT')  { STDERR.puts 'trap int'; EM.stop }
      Signal.trap('TERM') { STDERR.puts 'trap term'; EM.stop }

      @traffic.config[:logfiles].each do |path|
        EM::file_tail(path, Reader, @traffic)
      end
      EM.add_periodic_timer(@traffic.config[:update_interval]) do
        @traffic.update_stats
      end
      # EM.add_shutdown_hook { File.delete(PID_FILE) if not @options[:foreground] }
    end
  end

  def run_playback
    @traffic.open_db
    @traffic.update_frontend_data
    EM.run do
      Signal.trap('INT')  { STDERR.puts 'trap int'; EM.stop }
      Signal.trap('TERM') { STDERR.puts 'trap term'; EM.stop }

      EM.add_periodic_timer(@traffic.config[:update_interval]) do
        @traffic.update_frontend_data
      end
      # EM.add_shutdown_hook { File.delete(PID_FILE) if not @options[:foreground] }
    end
  end

  def worker
    STDERR.puts "euid before: #{Process.euid}"
    if @options[:group_id]
      gid = (Integer(@options[:group_id]) rescue nil) || Etc.getpwnam(@options[:group_id]).uid
      Process::Sys.setgid(gid)
    end

    if @options[:user_id]
      uid = (Integer(@options[:user_id]) rescue nil) || Etc.getpwnam(@options[:user_id]).uid
      Process::Sys.setuid(uid)
    end
    STDERR.puts "euid after: #{Process.euid}"

    @traffic = Traffic.new(@options[:config_file])

    begin
      if @options[:playback]
        run_playback
      else
        run
      end
      exit(0)
    rescue => e
      STDERR.puts "recovery: #{e.message}"
      sleep 5
      retry
    end
  end

  alias_method :foreground, :worker

  def get_pid
    File.read(PID_FILE).to_i rescue nil
  end

  def write_pid(pid)
    File.open(PID_FILE, 'w') {|f| f.puts pid }
    # FileUtils.chown(nil, @options[:group_id], PID_FILE) if @options[:group_id]
    # FileUtils.chown(@options[:user_id], nil, PID_FILE) if @options[:user_id]
  end

  def daemonise
    if pid = get_pid
      warn "probytesd appears to be running (PID #{pid}) -- remove #{PID_FILE} if it is not"
      exit(-1)
    end

    STDERR.puts "euid before daemonising: #{Process.euid}"
    Process.daemon
    child_pid = fork do
      # worker process

      pid = $$
      STDERR.reopen('/tmp/probytesd.log')

      begin
        STDERR.puts "euid before writing pidfile: #{Process.euid}"
        write_pid(pid)
        # Process.detach(pid)
      rescue => e
        # Process.kill('TERM', pid)
        warn "cannot write PID file: #{e.message}"
        exit(2)
      end

      worker
    end

    # supervisor process

    STDERR.reopen('/tmp/probytesd2.log')
    STDERR.puts('waiting for child')
    Process.wait(child_pid)
    STDERR.puts('removing PID file')
    File.delete(PID_FILE)
  end
end

# parse command line

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = 'Usage: probytesd [OPTIONS]'
  opt.separator ''
  opt.separator "Run the proper:bytes data collector daemon. PID will be written to #{PID_FILE}."
  opt.separator ''
  opt.separator 'Options'

  opt.on('-c', '--config FILE', "configuration file name (defaults to #{CONFIG_FILE})") do |filename|
    options[:config_file] = filename
  end

  opt.on('-f', '--foreground', 'do not daemonise, ignore PID file, log to STDERR instead of syslog') do
    options[:foreground] = true
  end

  opt.on('-g', '--group ID', 'group name/ID to run under') do |group|
    options[:group_id] = group
  end

  opt.on('-h', '--help', 'help') do
    puts opt_parser
    exit(0)
  end

  opt.on('-m', '--mockup', 'fill DB with fake data, then exit') do
    options[:mockup] = true
  end

  opt.on('-p', '--playback', 'only export frontend and data, no input processing') do
    options[:playback] = true
  end

  opt.on('-u', '--user ID', 'user name/ID to run under') do |user|
    options[:user_id] = user
  end
end

opt_parser.parse!

Logger.target = options[:foreground] ? :stderr : :syslog

if options[:mockup]
  traffic = Traffic.new(options[:config_file])
  traffic.open_db
  traffic.mockup
  traffic.update_frontend_data
  exit(0)
end

STDERR.puts "euid at start: #{Process.euid}"

daemon = Daemon.new(options)

if options[:foreground]
  daemon.foreground
else
  daemon.daemonise
end
